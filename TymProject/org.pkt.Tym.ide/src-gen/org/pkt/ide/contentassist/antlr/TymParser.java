/*
 * generated by Xtext 2.12.0
 */
package org.pkt.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.pkt.ide.contentassist.antlr.internal.InternalTymParser;
import org.pkt.services.TymGrammarAccess;

public class TymParser extends AbstractContentAssistParser {

	@Inject
	private TymGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTymParser createParser() {
		InternalTymParser result = new InternalTymParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getElementsAlternatives_0(), "rule__Model__ElementsAlternatives_0");
					put(grammarAccess.getAbstractElementAccess().getAlternatives(), "rule__AbstractElement__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives_0(), "rule__Variable__Alternatives_0");
					put(grammarAccess.getVariableAccess().getExpressionAlternatives_2_0(), "rule__Variable__ExpressionAlternatives_2_0");
					put(grammarAccess.getVariableTypeAccess().getAlternatives(), "rule__VariableType__Alternatives");
					put(grammarAccess.getPrintStatementAccess().getExpressionAlternatives_1_0(), "rule__PrintStatement__ExpressionAlternatives_1_0");
					put(grammarAccess.getTestStatementAccess().getExpressionAlternatives_1_0(), "rule__TestStatement__ExpressionAlternatives_1_0");
					put(grammarAccess.getLoopStatementAccess().getExpressionAlternatives_1_0(), "rule__LoopStatement__ExpressionAlternatives_1_0");
					put(grammarAccess.getReturnAccess().getExpressionAlternatives_1_0(), "rule__Return__ExpressionAlternatives_1_0");
					put(grammarAccess.getEqualityAccess().getOpAlternatives_1_1_0(), "rule__Equality__OpAlternatives_1_1_0");
					put(grammarAccess.getComparisonAccess().getOpAlternatives_1_1_0(), "rule__Comparison__OpAlternatives_1_1_0");
					put(grammarAccess.getPlusOrMinusAccess().getAlternatives_1_0(), "rule__PlusOrMinus__Alternatives_1_0");
					put(grammarAccess.getMulOrDivAccess().getOpAlternatives_1_0_1_0(), "rule__MulOrDiv__OpAlternatives_1_0_1_0");
					put(grammarAccess.getPrimaryAccess().getAlternatives(), "rule__Primary__Alternatives");
					put(grammarAccess.getAtomicAccess().getAlternatives(), "rule__Atomic__Alternatives");
					put(grammarAccess.getAtomicAccess().getValueAlternatives_2_1_0(), "rule__Atomic__ValueAlternatives_2_1_0");
					put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
					put(grammarAccess.getVariableAccess().getGroup_0_0(), "rule__Variable__Group_0_0__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
					put(grammarAccess.getFunctionAccess().getGroup_4_1(), "rule__Function__Group_4_1__0");
					put(grammarAccess.getPrintStatementAccess().getGroup(), "rule__PrintStatement__Group__0");
					put(grammarAccess.getTestStatementAccess().getGroup(), "rule__TestStatement__Group__0");
					put(grammarAccess.getTestStatementAccess().getGroup_3(), "rule__TestStatement__Group_3__0");
					put(grammarAccess.getBlockAccess().getGroup(), "rule__Block__Group__0");
					put(grammarAccess.getFunctionBlockAccess().getGroup(), "rule__FunctionBlock__Group__0");
					put(grammarAccess.getLoopStatementAccess().getGroup(), "rule__LoopStatement__Group__0");
					put(grammarAccess.getReturnAccess().getGroup(), "rule__Return__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup(), "rule__FunctionCall__Group__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2(), "rule__FunctionCall__Group_2__0");
					put(grammarAccess.getFunctionCallAccess().getGroup_2_1(), "rule__FunctionCall__Group_2_1__0");
					put(grammarAccess.getOrAccess().getGroup(), "rule__Or__Group__0");
					put(grammarAccess.getOrAccess().getGroup_1(), "rule__Or__Group_1__0");
					put(grammarAccess.getAndAccess().getGroup(), "rule__And__Group__0");
					put(grammarAccess.getAndAccess().getGroup_1(), "rule__And__Group_1__0");
					put(grammarAccess.getEqualityAccess().getGroup(), "rule__Equality__Group__0");
					put(grammarAccess.getEqualityAccess().getGroup_1(), "rule__Equality__Group_1__0");
					put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
					put(grammarAccess.getComparisonAccess().getGroup_1(), "rule__Comparison__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup(), "rule__PlusOrMinus__Group__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1(), "rule__PlusOrMinus__Group_1__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_0(), "rule__PlusOrMinus__Group_1_0_0__0");
					put(grammarAccess.getPlusOrMinusAccess().getGroup_1_0_1(), "rule__PlusOrMinus__Group_1_0_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup(), "rule__MulOrDiv__Group__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1(), "rule__MulOrDiv__Group_1__0");
					put(grammarAccess.getMulOrDivAccess().getGroup_1_0(), "rule__MulOrDiv__Group_1_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_0(), "rule__Primary__Group_0__0");
					put(grammarAccess.getPrimaryAccess().getGroup_1(), "rule__Primary__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_0(), "rule__Atomic__Group_0__0");
					put(grammarAccess.getAtomicAccess().getGroup_1(), "rule__Atomic__Group_1__0");
					put(grammarAccess.getAtomicAccess().getGroup_2(), "rule__Atomic__Group_2__0");
					put(grammarAccess.getAtomicAccess().getGroup_3(), "rule__Atomic__Group_3__0");
					put(grammarAccess.getModelAccess().getElementsAssignment(), "rule__Model__ElementsAssignment");
					put(grammarAccess.getVariableAccess().getVartypeAssignment_0_0_0(), "rule__Variable__VartypeAssignment_0_0_0");
					put(grammarAccess.getVariableAccess().getNameAssignment_0_0_1(), "rule__Variable__NameAssignment_0_0_1");
					put(grammarAccess.getVariableAccess().getVariableAssignment_0_1(), "rule__Variable__VariableAssignment_0_1");
					put(grammarAccess.getVariableAccess().getExpressionAssignment_2(), "rule__Variable__ExpressionAssignment_2");
					put(grammarAccess.getFunctionAccess().getReturnAssignment_1(), "rule__Function__ReturnAssignment_1");
					put(grammarAccess.getFunctionAccess().getNameAssignment_2(), "rule__Function__NameAssignment_2");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_4_0(), "rule__Function__ParamsAssignment_4_0");
					put(grammarAccess.getFunctionAccess().getParamsAssignment_4_1_1(), "rule__Function__ParamsAssignment_4_1_1");
					put(grammarAccess.getFunctionAccess().getBodyAssignment_6(), "rule__Function__BodyAssignment_6");
					put(grammarAccess.getPrintStatementAccess().getExpressionAssignment_1(), "rule__PrintStatement__ExpressionAssignment_1");
					put(grammarAccess.getTestStatementAccess().getExpressionAssignment_1(), "rule__TestStatement__ExpressionAssignment_1");
					put(grammarAccess.getTestStatementAccess().getThenBlockAssignment_2(), "rule__TestStatement__ThenBlockAssignment_2");
					put(grammarAccess.getTestStatementAccess().getElseBlockAssignment_3_1(), "rule__TestStatement__ElseBlockAssignment_3_1");
					put(grammarAccess.getBlockAccess().getElementsAssignment_0(), "rule__Block__ElementsAssignment_0");
					put(grammarAccess.getFunctionBlockAccess().getElementsAssignment_0(), "rule__FunctionBlock__ElementsAssignment_0");
					put(grammarAccess.getLoopStatementAccess().getExpressionAssignment_1(), "rule__LoopStatement__ExpressionAssignment_1");
					put(grammarAccess.getLoopStatementAccess().getBodyAssignment_2(), "rule__LoopStatement__BodyAssignment_2");
					put(grammarAccess.getReturnAccess().getExpressionAssignment_1(), "rule__Return__ExpressionAssignment_1");
					put(grammarAccess.getFunctionCallAccess().getFuncnameAssignment_0(), "rule__FunctionCall__FuncnameAssignment_0");
					put(grammarAccess.getFunctionCallAccess().getParamsAssignment_2_0(), "rule__FunctionCall__ParamsAssignment_2_0");
					put(grammarAccess.getFunctionCallAccess().getParamsAssignment_2_1_1(), "rule__FunctionCall__ParamsAssignment_2_1_1");
					put(grammarAccess.getOrAccess().getRightAssignment_1_2(), "rule__Or__RightAssignment_1_2");
					put(grammarAccess.getAndAccess().getRightAssignment_1_2(), "rule__And__RightAssignment_1_2");
					put(grammarAccess.getEqualityAccess().getOpAssignment_1_1(), "rule__Equality__OpAssignment_1_1");
					put(grammarAccess.getEqualityAccess().getRightAssignment_1_2(), "rule__Equality__RightAssignment_1_2");
					put(grammarAccess.getComparisonAccess().getOpAssignment_1_1(), "rule__Comparison__OpAssignment_1_1");
					put(grammarAccess.getComparisonAccess().getRightAssignment_1_2(), "rule__Comparison__RightAssignment_1_2");
					put(grammarAccess.getPlusOrMinusAccess().getRightAssignment_1_1(), "rule__PlusOrMinus__RightAssignment_1_1");
					put(grammarAccess.getMulOrDivAccess().getOpAssignment_1_0_1(), "rule__MulOrDiv__OpAssignment_1_0_1");
					put(grammarAccess.getMulOrDivAccess().getRightAssignment_1_1(), "rule__MulOrDiv__RightAssignment_1_1");
					put(grammarAccess.getPrimaryAccess().getExpressionAssignment_1_2(), "rule__Primary__ExpressionAssignment_1_2");
					put(grammarAccess.getAtomicAccess().getValueAssignment_0_1(), "rule__Atomic__ValueAssignment_0_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_1_1(), "rule__Atomic__ValueAssignment_1_1");
					put(grammarAccess.getAtomicAccess().getValueAssignment_2_1(), "rule__Atomic__ValueAssignment_2_1");
					put(grammarAccess.getAtomicAccess().getVariableAssignment_3_1(), "rule__Atomic__VariableAssignment_3_1");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TymGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TymGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
